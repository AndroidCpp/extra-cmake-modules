# This is a basic version file for the Config-mode of find_package().
# It is used by write_basic_package_version_file() as input file for configure_file()
# to create a version-file which can be installed along a config.cmake file.
#
# The created file sets PACKAGE_VERSION_EXACT if the current version string and
# the requested version string are exactly the same and it sets
# PACKAGE_VERSION_COMPATIBLE if the current version is >= requested version,
# but only if the requested major version is the same as the current one EXCEPT
# that all minor releases after (and including) @CVF_FIRST_PRERELEASE_VERSION@
# are considered to be part of the next major release.
#
# The variables CVF_VERSION and CVF_FIRST_PRERELEASE_VERSION must be set before
# calling configure_file().


set(PACKAGE_VERSION "@CVF_VERSION@")

if("${PACKAGE_VERSION}" VERSION_LESS "${PACKAGE_FIND_VERSION}" )
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
else()

  if("@CVF_VERSION@" MATCHES "^([0-9]+)\\.([0-9]+)(\\.|$)")
    set(CVF_VERSION_MAJOR "${CMAKE_MATCH_1}")
    set(CVF_VERSION_MINOR "${CMAKE_MATCH_2}")
  else()
    set(CVF_VERSION_MAJOR "@CVF_VERSION@")
    set(CVF_VERSION_MINOR "0")
  endif()

  set(_real_version_major "${CVF_VERSION_MAJOR}")
  if(NOT "${CVF_VERSION_MINOR}" LESS "@CVF_FIRST_PRERELEASE_VERSION@")
    math(EXPR _real_version_major "${CVF_VERSION_MAJOR}+1")
  endif()

  set(_real_find_version_major "${PACKAGE_FIND_VERSION_MAJOR}")
  if("${PACKAGE_FIND_VERSION_COUNT}" GREATER 1)
    if(NOT "${PACKAGE_FIND_VERSION_MINOR}" LESS "@CVF_FIRST_PRERELEASE_VERSION@")
      math(EXPR _real_find_version_major "${PACKAGE_FIND_VERSION_MAJOR}+1")
    endif()
  endif()

  if("${_real_find_version_major}" STREQUAL "${_real_version_major}")
    set(PACKAGE_VERSION_COMPATIBLE TRUE)
  else()
    set(PACKAGE_VERSION_COMPATIBLE FALSE)
  endif()

  if( "${PACKAGE_FIND_VERSION}" STREQUAL "${PACKAGE_VERSION}")
      set(PACKAGE_VERSION_EXACT TRUE)
  endif()
endif()


# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:
if("${CMAKE_SIZEOF_VOID_P}"  STREQUAL ""  OR "@CMAKE_SIZEOF_VOID_P@" STREQUAL "")
   return()
endif()

# check that the installed version has the same 32/64bit-ness as the one which is currently searching:
if(NOT "${CMAKE_SIZEOF_VOID_P}" STREQUAL "@CMAKE_SIZEOF_VOID_P@")
  math(EXPR installedBits "@CMAKE_SIZEOF_VOID_P@ * 8")
  set(PACKAGE_VERSION "${PACKAGE_VERSION} (${installedBits}bit)")
  set(PACKAGE_VERSION_UNSUITABLE TRUE)
endif()
